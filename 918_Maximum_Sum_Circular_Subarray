"""
918. Maximum Sum Circular Subarray

Medium

Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

 

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.
Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.
Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:

n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
"""
class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        first_ele = nums[0]                   # Access Initial Element of List Because We have to deal with a Circular Subarray
        curr_first_ele = nums[0]
        mi = nums[0]
        curr_mi = nums[0]
        for i in nums[1:]:

            curr_first_ele = max(i,curr_first_ele+i)
            first_ele = max(curr_first_ele,first_ele)
            curr_mi = min(i,curr_mi+i)
            mi = min(curr_mi,mi)

        if sum(nums) == mi:
            return first_ele
        
        return max(first_ele,sum(nums)-mi)
